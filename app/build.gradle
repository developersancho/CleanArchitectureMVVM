plugins {
    id("com.android.application")
    id("kotlin-android")
    id("kotlin-android-extensions")
    id("kotlin-kapt")
    id("androidx.navigation.safeargs.kotlin")
}

def buildVersionCode = new Date().format("yyMMddHHmm", TimeZone.getTimeZone("Europe/Istanbul")).toInteger()

android {
    compileSdkVersion(Versions.compileSdk)
    buildToolsVersion(Versions.buildTools)

    defaultConfig {
        applicationId = ApplicationId.id
        minSdkVersion(Versions.minSdk)
        targetSdkVersion(Versions.targetSdk)
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
        multiDexEnabled true
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        debug {
            debuggable true
            minifyEnabled false
        }
    }

    configurations.all {
        resolutionStrategy.eachDependency { DependencyResolveDetails details ->
            def requested = details.requested
            if (requested.group == "androidx.appcompat") {
                if (!requested.name.startsWith("multidex")) {
                    details.useVersion "1.+"
                }
            }
        }
    }

    compileOptions {
        sourceCompatibility = '1.8'
        targetCompatibility = '1.8'
    }

    kotlinOptions {
        jvmTarget = "1.8"
    }

    dataBinding {
        enabled = true
    }

    androidExtensions {
        experimental = true
    }

    kapt {
        useBuildCache = true
    }


    flavorDimensions 'default'

    productFlavors {

        dev {
            dimension = 'default'
            applicationIdSuffix = '.dev'
            versionCode = buildVersionCode
            versionName = '1.0.0'
            versionNameSuffix = '-dev'
            buildConfigField("String", "BASE_URL", "\"https://api.github.com/\"")
            buildConfigField("String", "ROOT_URL", "\"https://api.github.com/\"")
            buildConfigField("String", "API_HOST", "\"api.github.com/\"")
            buildConfigField("String", 'DB_NAME', '"github.db"')
            resValue "string", "app_name", "Test - App"
        }

        prod {
            dimension = 'default'
            applicationIdSuffix = ''
            versionCode = buildVersionCode
            versionName = '1.0.0'
            versionNameSuffix = ''
            buildConfigField("String", "BASE_URL", "\"https://api.github.com/\"")
            buildConfigField("String", "ROOT_URL", "\"https://api.github.com/\"")
            buildConfigField("String", "API_HOST", "\"api.github.com/\"")
            buildConfigField("String", 'DB_NAME', '"github.db"')
            resValue "string", "app_name", "Prod - App"
        }
    }
}

android.applicationVariants.all { variant ->
    def appName = "base-app"
    variant.outputs.all { output ->
        def newApkName = "${appName}-${variant.versionName}.apk"
        output.outputFileName = new File(newApkName)
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation project(Modules.repository)
    implementation project(Modules.remote)
    implementation project(Modules.local)
    implementation project(Modules.widget)
    implementation project(Modules.common)

    implementation(Libraries.kotlin)
    implementation(Libraries.appCompat)
    implementation(Libraries.coreKtx)
    implementation(Libraries.constraintLayout)
    implementation(Libraries.material)
    implementation(Libraries.legacy)
    // firebase
    implementation(Libraries.firebaseCore)
    // Bindings
    kapt(Libraries.databinding)
    // navigation
    implementation(Libraries.navFragment)
    implementation(Libraries.navFragmentKtx)
    implementation(Libraries.navUi)
    implementation(Libraries.navUiKtx)
    // Coroutines
    implementation(Libraries.kotlinCoroutineCore)
    implementation(Libraries.kotlinCoroutineAndroid)
    // retrofit - gson
    implementation(Libraries.gson)
    implementation(Libraries.retrofit)
    implementation(Libraries.retrofitConvertorGson)
    // okhttp
    implementation(Libraries.okhttp)
    implementation(Libraries.okhttpLogging)
    implementation(Libraries.okhttpUrlConnection)
    // lifecycle
    implementation(Libraries.lifeCycleLiveData)
    implementation(Libraries.lifeCycleViewModel)
    //implementation(Libraries.lifeCycleViewModelKtx)
    implementation(Libraries.lifeCycleExtension)
    kapt(Libraries.lifeCycleCommon)
    // koin for di
    implementation(Libraries.koinCore)
    implementation(Libraries.koinAndroid)
    implementation(Libraries.koinScope)
    implementation(Libraries.koinViewModel)
    // room
    implementation(Libraries.room)
    kapt(Libraries.roomCompiler)
    // glide
    implementation(Libraries.glide)
    kapt(Libraries.glideCompiler)
    // timber
    implementation(Libraries.timber)

    // test implementation
    testImplementation(Libraries.koinTest)
    testImplementation(Libraries.lifeCycleTest)
    testImplementation(Libraries.junit)
    // android test implementation
    androidTestImplementation(Libraries.junitExt)
    androidTestImplementation(Libraries.espressoCore)
}
